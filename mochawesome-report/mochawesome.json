{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2020-11-24T08:56:20.206Z",
    "end": "2020-11-24T08:56:29.610Z",
    "duration": 9404,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2820d663-8598-4d71-b150-1063d42cee41",
      "title": "",
      "fullFile": "cypress/integration/examples/Demoblaze.js",
      "file": "cypress/integration/examples/Demoblaze.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bdf20099-e2ba-445d-8938-22b644a4be76",
          "title": "Suite - Demoblaze product validation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testcase - Demoblaze product validation",
              "fullTitle": "Suite - Demoblaze product validation Testcase - Demoblaze product validation",
              "timedOut": null,
              "duration": 7559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _this2 = this;\nvar loginPage = new _LoginPage[\"default\"]();\nvar cartPage = new _CartPage[\"default\"]();\ncy.visit(Cypress.env('url')); //Create an account by clicking on Sign-up button\nloginPage.clickSignUp().click().wait(1000);\nloginPage.signUpUserName().type(this.data.username);\nloginPage.signUpPassword().type(this.data.password);\nloginPage.signUpRegisterButton().click().then(function () {\n  var _this = this;\n  //Handling the alert window\n  cy.on('window:alert', function (signUpMessage) {\n    if (signUpMessage == _this.data.signUpSuccessMessage) {\n      expect(signUpMessage).to.equal(_this.data.signUpSuccessMessage);\n    } else {\n      expect(signUpMessage).not.to.equal(_this.data.signUpSuccessMessage);\n    }\n  });\n}); //Login to the portal using new account credentials\nloginPage.signUpCancelButton().click();\nloginPage.clickLogin().click().wait(1000);\nloginPage.loginUserName().type(this.data.username);\nloginPage.loginPassword().type(this.data.password);\nloginPage.loginButton().click().wait(1000); //User login validation\ncy.contains(this.data.userValidation).then(function (element) {\n  var signInUser = element.text();\n  expect(signInUser).to.equal(this.data.userValidation + ' ' + this.data.username);\n}); //Added a custom command, addProduct, in commands.js under support folder\nthis.data.deviceModel.forEach(function (element) {\n  cy.addProduct(element);\n}); //Adding the desired device to the cart\ncartPage.addToCart().click().then(function () {\n  //Validating the alert window upon successfully adding the device to the cart\n  cy.on('window:alert', function (str) {\n    expect(str).to.equal('Product added.');\n  });\n}); //Navigate to cart page and verify if the product added is successful\ncartPage.clickOnCart().click();\ncartPage.deviceValidation().each(function ($el, index, $list) {\n  var productAdded = $el.text();\n  expect(productAdded).contains(_this2.data.deviceModel);\n});",
              "err": {},
              "uuid": "d0e8cc0c-75c9-49d9-b2ac-0108c5d45f3d",
              "parentUUID": "bdf20099-e2ba-445d-8938-22b644a4be76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0e8cc0c-75c9-49d9-b2ac-0108c5d45f3d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7559,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}